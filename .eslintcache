[{"/home/hamit/Desktop/react/to-do/src/index.js":"1","/home/hamit/Desktop/react/to-do/src/App.js":"2","/home/hamit/Desktop/react/to-do/src/Home.js":"3","/home/hamit/Desktop/react/to-do/src/Navbar.js":"4","/home/hamit/Desktop/react/to-do/src/TodoList.js":"5","/home/hamit/Desktop/react/to-do/src/404.js":"6"},{"size":432,"mtime":1650404270856,"results":"7","hashOfConfig":"8"},{"size":563,"mtime":1650550870535,"results":"9","hashOfConfig":"8"},{"size":2089,"mtime":1650466653802,"results":"10","hashOfConfig":"8"},{"size":356,"mtime":1650550910586,"results":"11","hashOfConfig":"8"},{"size":742,"mtime":1650463372382,"results":"12","hashOfConfig":"8"},{"size":284,"mtime":1650551123748,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"zbm6wb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/hamit/Desktop/react/to-do/src/index.js",[],["28","29"],"/home/hamit/Desktop/react/to-do/src/App.js",[],"/home/hamit/Desktop/react/to-do/src/Home.js",[],"/home/hamit/Desktop/react/to-do/src/Navbar.js",[],"/home/hamit/Desktop/react/to-do/src/TodoList.js",["30"],"const TodoList = ({todos, title, deleteFunc }) => {\n    const isAnyTodo = todos.length; // if any todo, then this variable will be true (1,2,3...etc). Otherwise it will be false (0)\n\n    return ( \n        <div className=\"blog-list\">\n            <h1>{title}</h1>\n            {todos.map(todo => (\n            <div className=\"blog-preview\" key={todo.id}>\n                <span className=\"delete-button-show\"><a className=\"delete-button\" onClick={() => deleteFunc(todo.id)}>x</a></span>                \n                <h2>{ todo.title }</h2>\n                <p>{ todo.body }</p>\n            </div>\n        ))}\n            {!isAnyTodo && <p className=\"empty-message\">Wow! It's such an empty</p>}\n        </div>\n    );\n}\n \nexport default TodoList;","/home/hamit/Desktop/react/to-do/src/404.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":9,"column":54,"nodeType":"37","endLine":9,"endColumn":119},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]